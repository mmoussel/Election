import Head from "next/head";

import { ethers } from "ethers";
import Web3Modal from "web3modal";
import { electionAddress } from "../config";
import { useEffect, useState } from "react";

import Election from "../artifacts/contracts/Election.sol/Election.json";

import {
  Button,
  PageContainer,
  BoxContainer,
  InnerBoxContainer,
} from "../styles/Home.styles";

let rpcEndpoint = null;

if (process.env.NEXT_PUBLIC_WORKSPACE_URL) {
  rpcEndpoint = process.env.NEXT_PUBLIC_WORKSPACE_URL;
}

export default function Home() {
  const [candiedates, setCandiedates] = useState([]);
  const [isFetching, setIsFetching] = useState(false);
  const [selctedCandiedates, setSelectedCandiedates] = useState(null);

  const [errMsg, setErrMsg] = useState("");

  useEffect(() => {
    const provider = new ethers.providers.JsonRpcProvider(rpcEndpoint);
    const electionContract = new ethers.Contract(
      electionAddress,
      Election.abi,
      provider
    );

    const unsubscribe = electionContract
      .on("VotedEvent", function (event) {
        let data = event;
        console.log("data : ", data);
        loadCandidates();
      })
      .on("error", console.error);
    loadCandidates();

    return unsubscribe;
  }, []);

  const loadCandidates = async () => {
    setIsFetching(true);
    const provider = new ethers.providers.JsonRpcProvider(rpcEndpoint);
    const electionContract = new ethers.Contract(
      electionAddress,
      Election.abi,
      provider
    );

    try {
      const data = await electionContract.getCandidates();
      const items = await Promise.all(
        data.map((i) => {
          let item = {
            itemId: i.id.toNumber(),
            voteCount: i.voteCount?.toNumber(),
            ...i,
          };
          return item;
        })
      );
      setCandiedates(items);
      setIsFetching(false);
    } catch (e) {
      console.log(e);
      setIsFetching(false);
    }
  };

  const vote = async () => {
    setErrMsg(null);
    try {
      const candidateId = selctedCandiedates?.id;
      const web3Modal = new Web3Modal();
      const connection = await web3Modal.connect();
      const provider = new ethers.providers.Web3Provider(connection);
      const signer = provider.getSigner();
      let contract = new ethers.Contract(electionAddress, Election.abi, signer);
      await contract.vote(candidateId);
      setSelectedCandiedates(null);
    } catch (e) {
      console.log("vote error : ", e);
      setErrMsg(e?.message);
    }
  };

  return (
    <div>
      <Head>
        <title>Elections</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageContainer>
        {isFetching ? (
          <h1>loading .... </h1>
        ) : (
          <>
            <h1>Plaese select Candiedate </h1>
            <BoxContainer>
              {candiedates.map((item) => (
                <InnerBoxContainer
                  onClick={() => setSelectedCandiedates(item)}
                  key={item.id.toString()}
                  selected={item.id === selctedCandiedates?.id}
                >
                  <h5>{item.name}</h5>
                  <h5>Vote Count : {item.voteCount.toString()}</h5>
                </InnerBoxContainer>
              ))}
            </BoxContainer>
          </>
        )}
        {selctedCandiedates?.id && (
          <span>Selected Candiedate is : {selctedCandiedates?.name}</span>
        )}
        {selctedCandiedates && <Button onClick={vote}>Vote</Button>}
      </PageContainer>
      <h3>{errMsg}</h3>
    </div>
  );
}
